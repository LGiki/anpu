---
import type { CollectionEntry } from 'astro:content'
import type { z } from 'astro:content'
import { songCollectionSchema } from '@/content.config'
import { defaultLang, ui } from '@/i18n/ui'
import { getLangFromUrl, useTranslatedPath, useTranslations } from '@/i18n/utils'
import { durationToHms } from '@/utils/utils'
import { slugify } from '@/utils/utils'
import dayjs from 'dayjs'
import AlbumBadge from './AlbumBadge.astro'
import AlbumOtherTracks from './AlbumOtherTracks.astro'
import ContentCard from './ContentCard.astro'
import MetadataNotes from './MetadataNotes.astro'
import MetadataStringsItem from './MetadataStringsItem.astro'

type SongMetadataKey = keyof typeof songCollectionSchema.shape
type NotesMetadataType = z.infer<(typeof songCollectionSchema.shape)['notes']>
type ExtraMetadataType = z.infer<(typeof songCollectionSchema.shape)['extra']>

interface Props {
  song: CollectionEntry<'song'>
  albums?: CollectionEntry<'album'>[] | null
}

const { song, albums } = Astro.props

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const translatePath = useTranslatedPath(lang)

const IgnoreMetadataKeys: SongMetadataKey[] = ['title', 'hasBanlamTone']
---

<ContentCard>
  {
    Object.entries(songCollectionSchema.shape).map(([key, fieldSchema]) => {
      const typedKey = key as SongMetadataKey;
      const fieldDescription = fieldSchema._def
        .description as keyof (typeof ui)[typeof defaultLang];
      if (!IgnoreMetadataKeys.includes(typedKey)) {
        let metadataValue = song.data[typedKey];
        if (typedKey === "album") {
          if (albums && albums.length !== 0) {
            return (
              <div class="break-all flex items-center">
                <span class="flex-shrink-0">{t(fieldDescription)}：</span>
                <div class="inline-flex items-center gap-2 flex-wrap">
                  {albums.map((album) => {
                    const [_, ...albumSlug] = album.id.split("/");
                    const albumUrl = translatePath(
                      `/album/${album.data.customSlug || slugify(albumSlug.join())}`
                    );
                    return (
                      <AlbumBadge
                        albumTitle={album.data.title}
                        albumUrl={albumUrl}
                      />
                    );
                  })}
                </div>
              </div>
            );
          } else if (metadataValue) {
            <p class="break-all">
              {t(fieldDescription)}：
              <MetadataStringsItem value={metadataValue as string | string[]} />
            </p>
          }
        }
        if (typedKey === 'releaseDate') {
          if (albums && albums.length !== 0) {
            if (albums.length > 1) {
              return (
                <p class="flex-shrink-0">{t(fieldDescription)}：</p>
                <ul class="list-disc list-inside indent-2">
                  {albums.map(album => (
                    album.data.releaseDate && <li>「{album.data.title}」：{dayjs(album.data.releaseDate).format("YYYY-MM-DD")}</li>
                  ))}
                </ul>
              )
            } else {
              return (
                <p class="break-all">
                  {t(fieldDescription)}：{dayjs(metadataValue as Date).format("YYYY-MM-DD")}
                </p>
              )
            }
          } else if (metadataValue){
            <p class="break-all">
              {t(fieldDescription)}：{metadataValue}
            </p>
          }
        }
        if (metadataValue && fieldDescription) {
          if (metadataValue instanceof Date) {
            metadataValue = dayjs(metadataValue).format("YYYY-MM-DD");
          }
          if (typedKey === "duration") {
            metadataValue = durationToHms(metadataValue as number);
          }
          if (typedKey === "notes") {
            return <MetadataNotes notes={metadataValue as NotesMetadataType} />;
          }
          if (typedKey === "extra") {
            return (metadataValue as ExtraMetadataType)!.map((extraItem) => (
              <p class="break-all">
                {extraItem.title}：
                <MetadataStringsItem value={extraItem.value} />
              </p>
            ));
          }
          return (
            <p class="break-all">
              {t(fieldDescription)}：
              <MetadataStringsItem
                value={metadataValue as string | string[] | number}
              />
            </p>
          );
        }
      }
    })
  }
  {
    albums && albums.length > 0 && (
      <>
        {albums.map((album) => {
          if (album.data.list.length > 1) {
            return (
              <hr class="my-3 dark:bg-zinc-700/90 dark:color-zinc-700/90 dark:border-zinc-700/90" />
              <AlbumOtherTracks album={album} currentSong={song} />
            );
          }
        })}
      </>
    )
  }
</ContentCard>
