---
import "@fontsource/cinzel/700.css";
import LanguageSwitcher from "./LanguageSwitcher.astro";
import Button from "./Button.astro";
import { Icon } from "astro-icon/components";
import { DEFAULT_TITLE } from "@/constants";
import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "@/i18n/utils";
import { getCollectionNameFromUrl } from "@/utils";

const lang = getLangFromUrl(Astro.url);
const collectionName = getCollectionNameFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const collectionNameToHeader = {
  song: {
    url: "/",
    title: "Lyric",
  },
  album: {
    url: "/album",
    title: "Album",
  },
  concert: {
    url: "/concert",
    title: "Concert",
  },
  talking: {
    url: "/talking",
    title: "Talking",
  },
  statistics: {
    url: "/statistics",
    title: "Statistics",
  },
};

interface NavigationLink {
  iconName: string;
  url: string;
  title: string;
  target?: "_self" | "_blank" | "_parent" | "_top";
}

const NAVIGATION_LINKS: NavigationLink[] = [
  {
    iconName: "ph:article-ny-times",
    url: translatePath("/"),
    title: t("header.lyric"),
  },
  {
    iconName: "ph:vinyl-record",
    url: translatePath("/album"),
    title: t("header.album"),
  },
  {
    iconName: "ph:microphone-stage",
    url: translatePath("/concert"),
    title: t("header.concert"),
  },
  {
    iconName: "ph:chat-dots",
    url: translatePath("/talking"),
    title: t("header.talking"),
  },
  {
    iconName: "ph:chart-bar",
    url: translatePath("/statistics"),
    title: t("header.statistics"),
  },
  {
    iconName: "ph:cube-focus",
    url: "https://ar.anpu.me",
    title: t("header.xiaoheirenAR"),
    target: "_blank",
  },
];

const titleUrl =
  collectionName in collectionNameToHeader
    ? collectionNameToHeader[
        collectionName as keyof typeof collectionNameToHeader
      ].url
    : "/";
---

<header
  class="bg-white/75 dark:bg-zinc-900/50 sm:h-[var(--header-height)] h-[var(--mobile-header-height)] w-full shadow-md backdrop-blur-xl fixed top-0 left-0 z-10 px-3 sm:px-10 transition-all print:hidden flex items-center"
>
  <div
    class="max-w-3xl w-full flex items-center justify-between mx-auto sm:px-6"
  >
    <a href={translatePath(titleUrl)}>
      <div
        class="text-[var(--foreground)] flex gap-1 items-center font-['Cinzel'] sm:text-xl text-sm"
      >
        <div>{DEFAULT_TITLE}</div>
        {
          collectionName in collectionNameToHeader && (
            <>
              <div>Â·</div>
              <div>
                {
                  collectionNameToHeader[
                    collectionName as keyof typeof collectionNameToHeader
                  ].title
                }
              </div>
            </>
          )
        }
      </div>
    </a>
    <nav>
      <div class="flex space-x-2">
        <slot name="header-right" />
        <LanguageSwitcher labelClass="sm:flex hidden" />
        <Button
          square
          id="mobile-menu"
          title={t("header.mobileMenu")}
          aria-label={t("header.mobileMenu")}
        >
          <Icon name="ph:list-bold" />
        </Button>
      </div>
    </nav>
  </div>
</header>
<div
  style="transform: translateX(-100%)"
  id="drawer-container"
  class="fixed max-w-[24rem] w-3/4 duration-[400ms] ease-in-out transition-transform bg-white/80 dark:bg-zinc-900/80 backdrop-blur left-0 top-0 h-dvh z-50 flex flex-col py-5 gap-2 rounded-tr-xl rounded-br-xl"
>
  <div
    title={t("header.closeMobileMenu")}
    aria-label={t("header.closeMobileMenu")}
    class="flex justify-end items-center flex-shrink-0 dark:text-[var(--foreground)]"
  >
    <Icon
      name="ph:x-bold"
      class="mr-3 h-6 w-6 cursor-pointer"
      id="close-drawer"
    />
  </div>
  <div class="flex-1 h-0"></div>
  <div class="space-y-4 overflow-y-auto">
    {
      NAVIGATION_LINKS.map((navigationLink) => (
        <a
          class="drawer-item"
          href={navigationLink.url}
          title={navigationLink.title}
          target={navigationLink.target}
        >
          <Icon name={navigationLink.iconName} class="w-6 h-6" />
          <span>{navigationLink.title}</span>
        </a>
      ))
    }
  </div>
  <div class="flex-1 h-0"></div>
  <div class="flex-shrink-0 mx-5">
    <LanguageSwitcher selectClass="w-full" labelClass="h-[32px]" />
  </div>
</div>

<div
  id="mobile-menu-background"
  class="bg-gray-600/30 dark:bg-black/80 fixed top-0 left-0 z-20 w-screen h-dvh transition-opacity duration-500 translate-x-[-100%] opacity-0"
>
</div>

<script>
  const mobileMenuButton = document.getElementById("mobile-menu");
  const closeDrawerButton = document.getElementById("close-drawer");
  const mobileMenuBackground = document.getElementById(
    "mobile-menu-background"
  );
  const drawerContainer = document.getElementById("drawer-container");
  const bodies = document.getElementsByTagName("body");

  const toggleMobileMenu = () => {
    if (bodies.length > 0) {
      const body = bodies[0];
      if (body.dataset.drawerVisible === "false") {
        // Drawer is invisible, turn it on
        body.dataset.drawerVisible = "true";
        if (drawerContainer) {
          drawerContainer.style.transform = "";
          drawerContainer.classList.add("shadow-2xl");
        }
        mobileMenuBackground?.classList.remove("translate-x-[-100%]");
        mobileMenuBackground?.classList.remove("opacity-0");
        mobileMenuBackground?.classList.add("opacity-100");
      } else {
        // Drawer is visible, turn it off
        body.dataset.drawerVisible = "false";
        mobileMenuBackground?.classList.remove("opacity-100");
        mobileMenuBackground?.classList.add("opacity-0");
        mobileMenuBackground?.classList.add("translate-x-[-100%]");
        if (drawerContainer) {
          drawerContainer.style.transform = "translateX(-100%)";
          drawerContainer.classList.remove("shadow-2xl");
        }
      }
    }
  };

  mobileMenuButton?.addEventListener("click", toggleMobileMenu);
  mobileMenuBackground?.addEventListener("click", toggleMobileMenu);
  closeDrawerButton?.addEventListener("click", toggleMobileMenu);
</script>
