---
import type { CollectionEntry } from 'astro:content'
import type { z } from 'astro:content'
// biome-ignore lint/style/useImportType: <explanation>
import { albumCollectionSchema } from '@/content.config'
import type { defaultLang, ui } from '@/i18n/ui'
import { getLangFromUrl, useTranslations } from '@/i18n/utils'
import dayjs from 'dayjs'
import ContentCard from './ContentCard.astro'
import MetadataNotes from './MetadataNotes.astro'
import MetadataStringsItem from './MetadataStringsItem.astro'

type AlbumMetadataKey = keyof typeof albumCollectionSchema.shape
type NotesMetadataType = z.infer<(typeof albumCollectionSchema.shape)['notes']>

interface Props {
  album: CollectionEntry<'album'>
}

const { album } = Astro.props

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

const IgnoreMetadataKeys: AlbumMetadataKey[] = ['list']
---

<ContentCard class="leading-7 mt-2">
  {
    Object.entries(albumCollectionSchema.shape).map(([key, fieldSchema]) => {
      const typedKey = key as keyof typeof albumCollectionSchema.shape
      const fieldDescription = fieldSchema._def.description as keyof (typeof ui)[typeof defaultLang]
      if (!IgnoreMetadataKeys.includes(typedKey)) {
        let metadataValue = album.data[typedKey]
        if (metadataValue && fieldDescription) {
          if (metadataValue instanceof Date) {
            metadataValue = dayjs(metadataValue).format('YYYY-MM-DD')
          }
          if (typedKey === 'notes') {
            return (<MetadataNotes notes={metadataValue as NotesMetadataType} />)
          }
          return (
            <p class="break-all">{t(fieldDescription)}ï¼š<MetadataStringsItem value={metadataValue as string | string[] | number}/></p>
          )
        }
      }
    })
  }
</ContentCard>
