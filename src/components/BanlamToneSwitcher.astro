---
import { Icon } from "astro-icon/components";
import Button from "./Button.astro";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Button
  square
  id="banlam-tone-switch-button"
  title={t("banlamToneSwitcher.showBanlamTone")}
  aria-label={t("banlamToneSwitcher.showBanlamTone")}
  data-show-banlam-tone-title={t("banlamToneSwitcher.showBanlamTone")}
  data-hide-banlam-tone-title={t("banlamToneSwitcher.hideBanlamTone")}
  buttonClass="banlam-tone-switch-button"
>
  <Icon
    name="ph:book-bookmark"
    class="w-4 h-4"
    id="banlam-tone-switch-icon"
  />
</Button>

<script>
  const banlamToneSwitchButton = document.getElementById(
    "banlam-tone-switch-button"
  );
  const banlamToneSwitchIcon = document.getElementById(
    "banlam-tone-switch-icon"
  );
  const lyricTones = document.querySelectorAll(".lyric-tone");
  const lyricTones2 = document.querySelectorAll(".lyric-tone2");

  let availableTone = 1;
  if (lyricTones.length > 0) {
    availableTone++;
  }
  if (lyricTones2.length > 0) {
    availableTone++;
  }

  let banlamToneDisplayIndex = 0;

  const switchBanlamTone = (displayIndex: number) => {
    switch (displayIndex) {
      case 0:
        lyricTones.forEach((lyricToneElement) => {
          lyricToneElement.classList.add("hidden");
          lyricToneElement.ariaHidden = "true";
        });
        lyricTones2.forEach((lyricToneElement) => {
          lyricToneElement.classList.add("hidden");
          lyricToneElement.ariaHidden = "true";
        });
        break;
      case 1:
        lyricTones.forEach((lyricToneElement) => {
          lyricToneElement.classList.remove("hidden");
          lyricToneElement.ariaHidden = "false";
        });
        lyricTones2.forEach((lyricToneElement) => {
          lyricToneElement.classList.add("hidden");
          lyricToneElement.ariaHidden = "true";
        });
        break;
      case 2:
        lyricTones.forEach((lyricToneElement) => {
          lyricToneElement.classList.add("hidden");
          lyricToneElement.ariaHidden = "true";
        });
        lyricTones2.forEach((lyricToneElement) => {
          lyricToneElement.classList.remove("hidden");
          lyricToneElement.ariaHidden = "false";
        });
        break;
      default:
        break;
    }
  };

  banlamToneSwitchButton?.addEventListener("click", () => {
    banlamToneDisplayIndex = (banlamToneDisplayIndex + 1) % availableTone;
    switchBanlamTone(banlamToneDisplayIndex);
    if (banlamToneDisplayIndex > 0) {
      // 台语注音激活状态
      if (
        typeof banlamToneSwitchButton.dataset.banlamToneVisible ===
          "undefined" ||
        banlamToneSwitchButton.dataset.banlamToneVisible === "false"
      ) {
        banlamToneSwitchButton.dataset.banlamToneVisible = "true";
        // banlamToneSwitchIcon?.classList.add("text-rose-500");
        if (banlamToneSwitchButton.dataset.hideBanlamToneTitle) {
          banlamToneSwitchButton.title =
            banlamToneSwitchButton.dataset.hideBanlamToneTitle;
          banlamToneSwitchButton.ariaLabel =
            banlamToneSwitchButton.dataset.hideBanlamToneTitle;
        }
      }
    } else {
      // 台语注音关闭状态
      banlamToneSwitchButton.dataset.banlamToneVisible = "false";
      // banlamToneSwitchIcon?.classList.remove("text-rose-500");
      if (banlamToneSwitchButton.dataset.showBanlamToneTitle) {
        banlamToneSwitchButton.title =
          banlamToneSwitchButton.dataset.showBanlamToneTitle;
        banlamToneSwitchButton.ariaLabel =
          banlamToneSwitchButton.dataset.showBanlamToneTitle;
      }
    }
  });
</script>
