---
import { getCollection } from 'astro:content'
import BanlamToneSwitcher from '@/components/BanlamToneSwitcher.astro'
import Button from '@/components/Button.astro'
import LyricFontSizeSwitcher from '@/components/LyricFontSizeSwitcher.astro'
import LyricRenderer from '@/components/LyricRenderer.astro'
import LyricsShareModal from '@/components/LyricsShareModal.astro'
import SongMetadata from '@/components/SongMetadata.astro'
import { defaultLang } from '@/i18n/ui'
import { getLangFromUrl, useTranslations } from '@/i18n/utils'
import Layout from '@/layouts/Layout.astro'
import { slugify } from '@/utils/utils'
import { Icon } from 'astro-icon/components'
import dayjs from 'dayjs'

export async function getStaticPaths() {
  const songs = await getCollection('song', (song) => {
    const [lyricLanguage] = song.id.split('/')
    return lyricLanguage !== defaultLang
  })

  return Promise.all(
    songs.map(async (song) => {
      let albums = null
      const [lyricLanguage, ...slug] = song.id.replace(/(\.md)+$/, '').split('/')
      albums = await getCollection('album', (album) => {
        const [albumLanguage] = album.id.split('/')
        return albumLanguage !== defaultLang && album.data.list.includes(song.data.title)
      })
      albums.sort((a, b) => dayjs(b.data.releaseDate).diff(dayjs(a.data.releaseDate)))
      return {
        params: { lang: lyricLanguage, slug: slugify(slug.join()) },
        props: {
          song: song,
          albums: albums,
        },
      }
    })
  )
}

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

const { song, albums } = Astro.props
---

<Layout title={[song.data.title, "Lyric"]}>
  <article class="text-base leading-7 text-[var(--foreground)]" id="lyric-text">
    <h1 class="font-medium text-2xl mb-4" id="song-title">{song.data.title}</h1>
    {song.body && <LyricRenderer lyricsBody={song.body} />}
    <hr
      class="my-5 dark:bg-zinc-700/90 dark:color-zinc-700/90 dark:border-zinc-700/90"
    />
    <SongMetadata song={song} albums={albums} />
  </article>
  <LyricsShareModal song={song} />
  <slot slot="header-right">
    <LyricFontSizeSwitcher />
    <Button data-modal-open-trigger="share-lyrics-select">
      <Icon name="ph:share-network" class="mr-0 sm:mr-1" />
      <span class="sm:block hidden">{t("song.shareLyrics")}</span>
    </Button>
    {song.data.hasBanlamTone && <BanlamToneSwitcher />}
  </slot>
</Layout>
